# 第 2 章 8086/8088 CPU 的内部结构与汇编语言程序上机
本章主要内容：

1. 介绍 `8086/8088` CPU 的内部结构；
2. 阐述 `8086/8088` CPU 内部各个寄存器的功能及用途；
3. 讲解 `8086/8088` CPU 的存储器结构。

最后简单介绍了汇编语言程序设计的基本方法，并给出两个汇编语言程序实例。

## 2.1 8086/8088 CPU 的功能结构
`中央处理器 CPU 的任务是执行存放在存储器里的指令序列。` CPU 一般由 `运算器` 和 `控制器` 两部分组成，在微机中也常称为
`微处理器`。

`8086/8088` CPU 按功能可分为两个独立的部件：

* 总线接口单元 BIU (Bus Interface Unit)
* 执行单元 EU (Execution Unit)

### BIU
`BIU` 单元负责完成 

1. `8086/8088` CPU 与存储器之间的信息传送；
2. 总线控制；
3. I/O 数据传送；
4. 逻辑地址与物理地址转换；
5. 从存储器中取指令送至指令流队列排队；
6. 取出执行指令时所需的操作数，并传送给 `EU` 单元完成运算和操作。

### EU
`EU` 单元负责对来自指令流队列中的指令译码并执行，实施算术逻辑运算操作。

### 指令流水线
由于 `BIU` 和 `EU` 是两个相对独立的部件，因此取指令和执行指令可以并行完成，形成指令流水线结构。

指令流结构大大减少了 CPU 等待取指令的时间，提高了 CPU 的利用率和系统运行速度。

## 2.2 8086/8088 的寄存器结构
`8086/8088` CPU 共有 **14** 个 **16** 位寄存器，一般分为 4 类：

1. 数据寄存器；
2. 段寄存器；
3. 控制寄存器；
4. 指针寄存器。

具体分类如下：

    8086/8088 寄存器
      ├─通用寄存器
      │  ├─数据寄存器
      │  │  ├─AX -> |AH|AL|
      │  │  ├─BX -> |BH|BL|
      │  │  ├─CX -> |CH|CL|
      │  │  └─DX -> |DH|DL|
      │  ├─指针寄存器
      │  │  ├─堆栈指针寄存器
      │  │  │  └─SP
      │  │  └─基址变址寄存器
      │  │     └─BP
      │  └─变址寄存器
      │     ├─源变址寄存器
      │     │  └─SI
      │     └─目的变址寄存器
      │        └─DI
      ├─控制寄存器
      │  ├─指令指针寄存器
      │  │  └─IP
      │  └─标志寄存器
      │  	  └─FR
      └─段寄存器
          ├─代码段寄存器
          │  └─CS
          ├─数据段寄存器
          │  └─DS
          ├─附加段寄存器
          │  └─ES
          └─堆栈段寄存器
             └─SS

这些寄存器具有重要的作用，专门用于存放指令执行时需要的各种信息，如

* 操作数；
* 操作数地址；
* 中间计算结果。

### 2.2.1 数据寄存器 （Data Segment Register -> DS）
数据寄存器共有 4 个 16 位寄存器，即 `AX` `BX` `CX` `DX`，通常用来暂存计算过程中的操作数、运算结果或其他信息。它们既可以
作为一个 16 位的寄存器使用，也可以作为两个 8 位的寄存器分开使用。当它们作为两个 8 位寄存器用时，按高低字节分。

高 8 位寄存器命名为

* AH
* BH
* CH
* DH

低 8 位寄存器命名为

* AL
* BL
* CL
* DL

数据寄存器除了上述用途外，还有各自的专门用途。

#### AX (Accumulator) -> 累加器
它是算术运算的主要寄存器。此外还可以作为

* 乘法运算
* 除法运算
* 输入/输出指令的专用寄存器

#### BX (Base) -> 基址寄存器
该寄存器常用于存放存储区的起始地址。

#### CX (Count) -> 计数寄存器
该寄存器常用于循环操作或字符串操作过程中的计数。

#### DX (Data) 
该寄存器常与 `AX` 配合，用于双字长运算，`DX` 存放高位字，`AX` 存放低位字。此外，还可用于输入/输出指令中存放外部设备
接口的端口地址。

* [x86 memory segmentation -> DS](http://en.wikipedia.org/wiki/X86_memory_segmentation)
* [X86 Assembly/X86 Architecture](http://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture)
* [Memory data register](http://en.wikipedia.org/wiki/Memory_data_register)

### 2.2.2 段寄存器 -> (Segment Register)
为了运用所有的内存空间，`8086/8088` CPU 设定了 4 个段寄存器，分别为：

* CS
* DS
* ES
* SS

专门用于保存段首地址。

#### CS (Code Segment) -> 代码段寄存器
该寄存器用于存放正在或者正待执行的程序的段首址，其值为代码段的段值。

#### DS (Data Segment) -> 数据段寄存器
该寄存器用于存放正在或正待执行的数据段的段首址，其值为数据段的段值。

#### ES (Extra Segment) -> 附加段寄存器
该寄存器用于存放正在或正待执行的附加段的段首址，其值为附加数据段的段值。

#### SS (Stack Segment) -> 堆栈段寄存器
该寄存器用于存放正在或正待执行的堆栈段的段首址，其值为堆栈段的段值。

通常情况下

1. `CS` 划定并控制当前程序区；
2. `DS` 和 `ES` 划定并控制数据区；
3. `SS` 划定并控制堆栈区；

#### 段寄存器使用约定
|访问存储区类型    	|缺省段寄存器	|可指定段寄存器	|段内偏移地址来源	|
|:----				|:----			|:----			|:----				|
|取指令码			|CS				|无				|IP					|
|堆栈操作			|SS				|无				|SP					|
|串操作源地址		|DS				|CS ES SS		|SI					|
|串操作目的地址		|ES				|无				|DI					|
|BP 用作基址寄存器	|SS				|CS DS ES		|依寻址方式寻找有效地址|
|一般数据存取		|DS				|CS ES SS		|依寻址方式寻找有效地址|

由上表可知，

1. 当取指令时，代码段的首地址必须存放到 `CS` 寄存器中，不允许使用其他段寄存器取代 `CS`；
2. 访问堆栈时，堆栈段的首地址必须存放到 `SS` 寄存器中，也不允许使用其他段寄存器取代 `SS`；
3. 当执行串操作指令时，源串缺省使用段寄存器 `DS`，也可选用 `CS` `ES` `SS`，而目的串只能使用 `ES` 段寄存器；
4. 当使用 `BP` 作为基址寄存器时，缺省的段寄存器为 `SS`，也可选用 `CS` `DS` `ES`；
5. 而对于一般数据的存取，缺省的段寄存器为 `DS`，也可选用 `CS` `ES` `SS`。

### 2.2.3 指针寄存器和变址寄存器
`指针寄存器` 和 `变址寄存器` 共有 4 个 16 位寄存器，即 

* `SP` -> 堆栈指针寄存器
* `BP` -> 基址指针寄存器
* `SI` -> 源变址寄存器
* `DI` -> 目的变址寄存器

**主要用于在访问存储单元时提供 16 位偏移地址。**

    注意
    指针寄存器和变址寄存器不可分割成 8 位寄存器，只能进行字节访问。

#### SP (Stack Pointer) -> 堆栈指针寄存器
该寄存器主要用于存放`当前堆栈段的段内偏移地址`，即 `顶地址`。

#### BP (Base Pointer) -> 基址指针寄存器
该寄存器常用于提供堆栈内某个单元的偏移地址，与 `SS` 段寄存器联用，可以访问堆栈中的任意一个存储单元。

#### SI (Source Index) -> 源变址寄存器
在串操作指令中，`SI` 作为隐含的源变址寄存器与数据段寄存器 `DS` 联用，以确定数据段中的存储单元地址，然后根
据 `DF` 标志，`SI` 进行自动增量或自动减量。

#### DI (Destination Index) -> 目的变址寄存器
在串操作指令中，`DI` 作为隐含的目的变址寄存器与附加段寄存器 `ES` 联用，以达到在附加段中寻址的目的，然后根
据 `DF` 标志，`DI` 进行自动增量或减量。