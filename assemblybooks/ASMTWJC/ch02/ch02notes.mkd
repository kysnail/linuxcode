# 第 2 章 8086/8088 CPU 的内部结构与汇编语言程序上机
本章主要内容：

1. 介绍 `8086/8088` CPU 的内部结构；
2. 阐述 `8086/8088` CPU 内部各个寄存器的功能及用途；
3. 讲解 `8086/8088` CPU 的存储器结构。

最后简单介绍了汇编语言程序设计的基本方法，并给出两个汇编语言程序实例。

## 2.1 8086/8088 CPU 的功能结构
`中央处理器 CPU 的任务是执行存放在存储器里的指令序列。` CPU 一般由 `运算器` 和 `控制器` 两部分组成，在微机中也常称为
`微处理器`。

`8086/8088` CPU 按功能可分为两个独立的部件：

* 总线接口单元 BIU (Bus Interface Unit)
* 执行单元 EU (Execution Unit)

### BIU
`BIU` 单元负责完成 

1. `8086/8088` CPU 与存储器之间的信息传送；
2. 总线控制；
3. I/O 数据传送；
4. 逻辑地址与物理地址转换；
5. 从存储器中取指令送至指令流队列排队；
6. 取出执行指令时所需的操作数，并传送给 `EU` 单元完成运算和操作。

### EU
`EU` 单元负责对来自指令流队列中的指令译码并执行，实施算术逻辑运算操作。

### 指令流水线
由于 `BIU` 和 `EU` 是两个相对独立的部件，因此取指令和执行指令可以并行完成，形成指令流水线结构。

指令流结构大大减少了 CPU 等待取指令的时间，提高了 CPU 的利用率和系统运行速度。

## 2.2 8086/8088 的寄存器结构
`8086/8088` CPU 共有 **14** 个 **16** 位寄存器，一般分为 4 类：

1. 数据寄存器；
2. 段寄存器；
3. 控制寄存器；
4. 指针寄存器。

具体分类如下：

    8086/8088 寄存器
      ├─通用寄存器
      │  ├─数据寄存器
      │  │  ├─AX -> |AH|AL|
      │  │  ├─BX -> |BH|BL|
      │  │  ├─CX -> |CH|CL|
      │  │  └─DX -> |DH|DL|
      │  ├─指针寄存器
      │  │  ├─堆栈指针寄存器
      │  │  │  └─SP
      │  │  └─基址变址寄存器
      │  │     └─BP
      │  └─变址寄存器
      │     ├─源变址寄存器
      │     │  └─SI
      │     └─目的变址寄存器
      │        └─DI
      ├─控制寄存器
      │  ├─指令指针寄存器
      │  │  └─IP
      │  └─标志寄存器
      │  	  └─FR
      └─段寄存器
          ├─代码段寄存器
          │  └─CS
          ├─数据段寄存器
          │  └─DS
          ├─附加段寄存器
          │  └─ES
          └─堆栈段寄存器
             └─SS

这些寄存器具有重要的作用，专门用于存放指令执行时需要的各种信息，如

* 操作数；
* 操作数地址；
* 中间计算结果。

### 2.2.1 数据寄存器 （Data Segment Register -> DS）
数据寄存器共有 4 个 16 位寄存器，即 `AX` `BX` `CX` `DX`，通常用来暂存计算过程中的操作数、运算结果或其他信息。它们既可以
作为一个 16 位的寄存器使用，也可以作为两个 8 位的寄存器分开使用。当它们作为两个 8 位寄存器用时，按高低字节分。

高 8 位寄存器命名为

* AH
* BH
* CH
* DH

低 8 位寄存器命名为

* AL
* BL
* CL
* DL

数据寄存器除了上述用途外，还有各自的专门用途。

#### AX (Accumulator) -> 累加器
它是算术运算的主要寄存器。此外还可以作为

* 乘法运算
* 除法运算
* 输入/输出指令的专用寄存器

#### BX (Base) -> 基址寄存器
该寄存器常用于存放存储区的起始地址。

#### CX (Count) -> 计数寄存器
该寄存器常用于循环操作或字符串操作过程中的计数。

#### DX (Data) 
该寄存器常与 `AX` 配合，用于双字长运算，`DX` 存放高位字，`AX` 存放低位字。此外，还可用于输入/输出指令中存放外部设备
接口的端口地址。

* [x86 memory segmentation -> DS](http://en.wikipedia.org/wiki/X86_memory_segmentation)
* [X86 Assembly/X86 Architecture](http://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture)
* [Memory data register](http://en.wikipedia.org/wiki/Memory_data_register)