# （第6讲） PHP5.4  数组、多维数组和数组函数

 1. PHP5.4 数组介绍和基本操作（创建、修改、删除、使用）
 2. PHP5.4 二维数组、遍历数组和相关数组函数

## PHP5.4 数组介绍
数组提供了一种快速，方便地管理一组相关数据的方法，是php程序设计中的重要内容。通过数组可以对大量性质相同的数据进行存储，排序，插入及删除等操作，从而可以有效地提高程序开发效率及改善程序的编写方式。

    键      key1        key2        key3        ...
    值      value1      value2      value3      ...
    下标    0           1           2           ...

php中将数组分为一维数组，二维数组和多维数组，但无论是一维还是多维，可以统一将数组分为数字索引数组和关联数组两种。每个元素由一个特殊的标识符来区分，称之为键(key)而每个键对应一个值(value)。

## PHP5.4 数组基本写作格式

    简单形式：array（值1，值2，值3, ……）
    Array(“aa”,12,true,2.2,”test”,50);

    完整形式：array（键1=>值1，键2=>值2，键3=>值3，……）
    Array(“title”=>“aa”,  ”age”=>20);

数组符这种使用方式，在 JS 中使用的比较多。

    key         =>      value
    键        数组符    值

有了键名，就不能再使用下标了。

## PHP5.4 数组的创建
创建一个数组两种模式：

    模式一：
    --------
    $arr= array(11,22,33,44……);
    $arr= array(‘a’=>’11’,’b’=>’22’);
 
    模式二：
    --------
    $arr[0]=‘20’;
    $arr[1]=’30’;
    ...

## PHP5.4 数组的修改、删除、使用
修改数组元素：

    $arr = array(11，22，33，44)；
    $arr[0]=66;    //数组变为$arr = array(66，22，33，44)；

删除数组元素：

    $arr = array(11，22，33，44)；
    unset($arr[0]);    //数组变为$arr = array(22，33，44)；

## PHP5.4 数组的使用
常见的数组的使用：

    访问单个元素，可以通过下标或者通过键名访问

    $arr = array(11，22，33，44)；
    echo  $arr[0]    //值为11

    // 这里使用了键名定义，所以不能使用下表引用。
    $arr = array(‘a’=>11，’b’=>22，’c’=>33)；
    echo  $arr[‘b’]    //值为22

## PHP5.4 数组的遍历
所谓遍历数组就是将数组里的元素根据要求逐个打印或得到相关的值，我们可以通过PHP5之后提供的一个非常不错的函数 foreach 实现，格式如下：

    foreach($arr  as $key => $val){
       [相关$key 或 $val 内容]
    }

### Demo - 数组的遍历

    $info = array("A"=>"php","B"=>"100","C"=>"com"); 
    foreach($info    as    $value){         //无键名模式
        echo $value."<br>"; 
    }

    echo "<hr>";
    foreach($info    as    $id   =>  $value){   //有键名、键值模式
        echo $id."---".$value."<br>"; 
    } 

## PHP5.4 二维数组
二维数组或者多维数组其实我们可以理解成为数组里面再次包含了数组类型的值，并通过同样的思路去访问。我们先通过构造一个二维数组来看：

    $arr = array(array("P","PP","PPP"),array("H","HH","HHH") );
    echo $arr[1][2];

## PHP5.4 数组相关函数

    函数名              函数功能概述
    ---------------------------------------------------------------------------
    array               新建一个数组
    array_combine       创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值
    array_count_values  统计数组中所有的值出现的次数
    array_fill          用给定的值填充数组
    array_flip          交换数组中的键和值
    array_keys          返回数组中的所有键名
    array_pad           用值将数组填补到指定长度
    array_product       计算数组中所有的值的乘积
    array_rand          从数组中随机取出一个或多个单元
    array_shift         将数组开头的单元移出数组
    array_pop           将数组最后一个单元移除数组
    array_unshift       在数组开头插入一个或多个单元
    array_push          将一个或多个单元压入数组的末尾（入栈）
    array_slice         从数组中取出一段
    array_sum           计算数组中所有值的和
    array_unique        移除数组中重复的值
    array_values        返回数组中所有的值

    assort              对数组进行排序并保持索引关系
    arsort              对数组进行逆向排序并保持索引关系
    ksort               键名的正序对数组进行排序
    krsort              键名的倒序对数组进行排序
    sort                键值的正序对数组进行排序
    rsort               键值的倒序对数组进行排序
    count               计算数组中的单元数目或对象中的属性个数
    current             返回数组中的当前单元
    each                返回数组中当前的键／值对并将数组指针向前移动一步
    list                把数组中的值赋给一些变量
    end                 将数组的内部指针指向最后一个单元
    in_array            检查数组中是否存在某个值
    next                将数组中的内部指针向前移动一位
    prev                将数组的内部指针倒回一位
    range               建立一个包含指定范围单元的数组
    reset               将数组的内部指针指向第一个单元
    shuffle             将数组打乱
    print_r             打印关于变量的易于理解的信息
    var_dump            打印变量的相关信息

`print_r` 这个函数真的很好用。其他的语言也应该提供类似的方法。

