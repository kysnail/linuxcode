第 3 章 Python 数据类型与基本语句
=================================

    对于一般的 Python 脚本，只要使用 Python 的内置数据类型就可以完成绝大多数工作。

3.1 Python 数据类型——数字
---------------------------
    数字是最基本的数据类型，任何编程语言都提供了对数字的支持。在 Python 中可以使用任意大的数字，而不用担心溢出。

3.1.1 基本类型
``````````````
    数字在 Python 中有 4 种类型
        - 整数
        - 长整数
        - 浮点数
        - 复数

	============	==============================================================
	类    型		描述
	============	==============================================================
	整数        	一般意义上的数，包含八进制（以数字0开头）及十六进制（以0x开头）
	长整数		无限大小的书，在结尾添加小写字母 l 或者大写字母 L。
	浮点数		小数或者用 E 或 e 表示的冥。
	复数		复数的虚部以字母 j 或者 J 结尾。
	============	==============================================================

    作为动态类型的语言，在 Python 中使用数字无需事先声明其类型 ::

	>>> a = 1
	>>> b = 12.5
	>>> a + b
	13.5
	>>> c=2011000000000000000000L
	>>> c
	2011000000000000000000L
	>>> d=20110000000000000000000l
	>>> d
	20110000000000000000000L
	>>> d - c
	18099000000000000000000L
	>>> d + b
	2.0110000000000001e+22
	>>> 2.30 - 1.30
	0.99999999999999978
	>>> 2.3 - 1
	1.2999999999999998
	>>> 07 + 05
	12
	>>> 0x7 + 0xa
	17
	>>> print '%o' % ( 07 + 05 )
	14
	>>> print '%x' % ( 07 + 05 )
	c
	>>> m = 9 + 3j
	>>> n = 15 - 2j
	>>> m + n
	(24+1j)
	>>> 

3.1.2 运算符
````````````
    Python 中的运算符

	===========	==============================================
	  运算符		描		述
	===========	==============================================
	    **			乘方运算符
	     *			乘法运算符
	    /			除法运算符
	    %			取余运算符
	    +			加法运算符
	    -			减法运算符
	    |			位或运算符
	    ^			位异或运算符
	    &			位与运算符
	    <<			左移运算符
	    >>			右移运算符
	===========	==============================================

    示例::

	>>> 2 ** 5			# 乘方运算，求解 2 的 5 次方
	32
	>>> 2 ** 0			# 求解 2 的 0 次方
	1
	>>> 3 * 2			# 乘法运算
	6
	>>> 4 / 2			
	2
	>>> 7 / 2
	3
	>>> 7 % 2
	1
	>>> 5 ^ 3			# 位异或，5 的二进制形式为 101，3 的为 011，异或后为 110 即十进制的 6
	6
	>>> 5 ^ 5
	0
	>>> 11 | 5			# 位或运算，11 的二进制形式为 1011 ，5 的二进制形式为 101，位或运算后为 1111
	15
	>>> 12 & 12
	12
	>>> 2 * 5 ** 2
	50
	>>> 2 + 3 * 5
	17
	>>> 2 + 5 ^ 5
	2
	>>> 3 + 4 * 5 ** 2 - 20
	83
	>>> 4 >> 2			# 右移两位相当于除以 4
	1
	>>> 4 >> 1			# 右移一位相当于除以 2
	2
	>>> 2 + (3 ^ 5)
	8
	>>> (2 + 3) * 5
	25
	>>> 


3.2 Python 数据类型——字符串 
------------------------------
    Python 中的字符串用来表示和存储文本，通常由如下三种表示形式。
	- 单引号（'...'）
	- 双引号（"..."）
	- 三引号（'''...''', ''''''...''''''）
    其中三引号表示可以引用多行文本，通常情况下，在 Python 中大段性的描述性文字就是用三引号包围，它的功能类似于
    HTML 中的 <pre> 标签。

3.2.1 字符串概述
``````````````
    字符串中可以包含数字、字母、以及一些控制字符，如换行符、制表符等。::

	>>> str1 = 'single quote'
	>>> str2 = "double quote'
	  File "<stdin>", line 1
	    str2 = "double quote'
				^
	SyntaxError: EOL while scanning string literal
	>>> str2 = "double quote"
	>>> str3 = '123'
	>>> str4 = 'a = 1 + 2 ^ 3 * 4'
	>>> str5 = 'Can\'t'
	>>> str5
	"Can't"
	>>> str6 = "Can't"
	  File "<stdin>", line 1
	    str6 "Can't"
		       ^
	SyntaxError: invalid syntax
	>>> str6 = "Can't"
	>>> str6
	"Can't"
	>>> 

    如果要在字符串中加入控制字符，或一些特殊字符，则需要使用转义字符进行标示，常见的转义字符如下所示：

	============	==============================================
	  转义字符			含    义
	============	==============================================
	     \n			换行符
	     \r			回车符
	     \t			制表符
	     \\			表示 \
	     \'			表示一个单引号，而不是字符串的结束
	     \"			表示一个双引号，而不是字符串的结束
	============	==============================================

    在 Linux 平台上的演示效果如下：::

	>>> t = 'Hi, \tPython!'		# 在字符串中加入制表符
	>>> print t
	Hi, 	Python!			# 只有使用 print 输出字符串时才会解释字符串中的转义字符
	>>> t
	'Hi, \tPython!'
	>>> t = 'Hi, \nPython!'		# 
	>>> print t
	Hi, 
	Python!
	>>> t
	'Hi, \nPython!'
	>>> t = 'Hi, \rPython!'		# 在字符串中加入回车，相当于使用换行符
	>>> print t
	Python!				# 只是在 Linux 平台下的回车含义在是比较确切的。在 Windows 平台上则体现不出来。
	>>> t
	'Hi, \rPython!'
	>>> t = 'Hi, \\nPython'		# 在字符串中加入 "\" ，而不是用用于转义字符。
	>>> print t
	Hi, \nPython
	>>> 

    同样的**回车符**在 Windows 平台上的表现就有所不同。::

	IDLE 2.6.6      
	>>> t = 'Hi, \rPython!'		# 这里回车的作用等同于换行
	>>> print t
	Hi, 
	Python!
	>>> t = 'Hi, \nPython!'		# 这里换行的作用体现了出来
	>>> print t
	Hi, 
	Python!
	>>> t = 'Hi, \r\nPython!'	# 这里如果两个同时加上，则会出现空行的情况，不过这个空行在 Notepad 中看不出来，只能在
	>>> print t			# vim/emeditor 这类编辑器中科院观察到。这本社也是由于平台对待换行的差异而造成的。
	Hi, 

	Python!
	>>> 


