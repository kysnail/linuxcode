第 5 章 正则表达式
==================
正则表达式是用某种模式去匹配一类具有共同特征的字符串，正则表达式主要用于处理文本。它能够使文本处理变得简单起来，
尤其对于复杂的查找、替换这样的工作，是用正则表达式会非常快地完成。在流行的文本编辑器里如 Emacs、Vim 等大都支持
正则表达式。

5.1 正则表达式概述
------------------
在 Python 的较早版本中使用 regex 模块来完成正则表达式的操作。在新的版本中已经删除了 regex 模块。当前的 Python 主要
使用 re 模块进行正则表达式的操作。re 模块提供了 Perl 风格的正则表达式。re 模块具有更好的可读性以及更强的功能。

5.1.1 基本元字符
````````````````
元字符是正则表达式中含有的字符。在正则表达式中可以在字符串中使用元字符用以匹配字符串的各种可能的情况。常用的元字符如下：::


	============	=============================================================================================
	   元字符		含 义
	============	=============================================================================================
	      .		 匹配处换行符以外的任何单个字符，如 "r.d" 会匹配 "red" "r d" 等，但不会匹配 "read"
	      *		 匹配位于 * 之前的任意个字符，如 "r*ed" 会匹配 "rred" "rrred" "red" 等
	      +		 匹配位于 + 之前的一个或多个字符，如 "r+ed" 会匹配 "rred" "rrred"，但不会匹配 "red"
	      |		 匹配位于 | 之前或者之后的字符，如 "red|blue" 会匹配 "red" "blue"
	      ^		 匹配行首
	      $ 	 匹配行尾
	      ?	 	 匹配位于 ? 之前的零个或一个字符，如 "r?ed" 会匹配 "rred" "red" 等，但不会匹配 "rrred"
	      \		 表示位于 \ 之后的为转义字符
	     []		 匹配位于 [] 中的任何一个字符，如 r[ae]d，会匹配 "rad" "red"
	     ()		 将位于 () 内的内容当作一个整体
	     {}		 按 {} 中的次数进行匹配
	============	=============================================================================================

元字符还可以配合起来使用。".*" 可以匹配任意个字符，如 "r.*d" 会匹配 "rd" "red" "read" 等。".+" 可以匹配任意的一个或者
多个字符，如 "r.+d" 会匹配 "red" "read" ，但不会匹配 "rd"。".?" 可以匹配任意的零个或一个字符，如 "r.?d" 会匹配 "rd" 
"red" ，但不会匹配 "read" 。

"^" 匹配行首，对于如下所示的一段文字，"^red" 只会匹配文中的第 3 个 "red" 。而对于 "red$" 则只会匹配文中的第 2 个 "red"。
  a red hat
  blue and red
  red and blue
在 "[]" 中还可以使用 "-" 来表示某一范围。例如在 "[]" 中，"a-z" 表示从 "a" 到 "z" 的所有小写字母，同样 "A-Z" 表示从 "A" 
到 "Z" 的所有大写字母，而 "0-9" 表示从 "0" 开始到 "9" 的数字。"[a-zA-Z0-9]" 表示任意的字母或者数字。
