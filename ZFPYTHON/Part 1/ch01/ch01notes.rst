虽然 Python 被称为脚本语言，通常说来，脚本语言都是解释性的语言，不需要编译过程。但 Python 具有编译过程，它会将
脚本编译成字节码的形式。一般不需要将脚本自己进行编译，Python 会自己根据需要编译。通常情况下，只有作为模块的脚本
才会被编译成字节码的形式。

Python 最早在 MAC 系统下实现。

JPython 可以在 Java 中使用 Python 快速、简便地进行开发，充分利用 Python 的灵活性和快速性。

.NET 是 Microsoft XML Web services 平台，是微软公司极力推崇的技术。使用 XML Web services，不同的应用程序可以进行
通信和数据共享。即使这些应用程序运行在不同的操作系统上，也不会影响它们之间的通信和数据共享。

使用 Vim 编写 Python 脚本
=========================
gVim: 标准的 Vim
gVim Easy: 无模式的 Vim
gVim Read only: 制度模式的 Vim

set nubackup 
不生成备份文件

V 进入块模式（在 Windows 下需要按 Ctrl+Q 组合键）

编辑模式
========
在编辑模式下，有几个对编程非常有用的命令，如 Ctrl+P 组合键或者 Ctrl+N 组合键可以补全当前单词（前提是该单词已经在
当前 Vim 编辑文件中出现过。）。如果所安装的 Vim 支持 Python，在编辑 Python 脚本时还可以通过 Ctrl+X 组合键，然后按
Ctrl+O 组合键自动补全 Python 模块中的函数或者属性。如果所安装的 Vim 不支持 Python，即不能使用 Ctrl+X、Ctrl+Q 组合
键则需要自己编译 Vim。


使用 Emacs 编写 Python 脚本
===========================
Emacs 中常用命令
----------------
C-v		向后翻一页
M-v		向前翻一页
C-l		将当前行居中
C-f		向前移动一个字符
M-f		向前移动一个单词
C-b		向后移动一个字符
M-b		向后移动一个单词
C-n		向下移动一行
C-p		向上移动一行
C-a		移至当前行的第一个字符
M-a		移至当前所在句子的第一个字符
C-e		移至当前行的最后一个字符
M-p		移至当前行所在句子的最后一个字符
M-<		移至当前窗口的第一个字符
M->		移至当前窗口的最后一个字符
C-x C-c		永久离开 Emacs
C-x C-f		读取文件到 Emacs
C-x r		以只读方式打开一个文件
C-x C-q		清除一个窗口的只读属性
C-x C-s 	保存文件到磁盘
C-x s 		保存所有文件
C-x i		插入其他文件的内容到当前缓冲区
C-x C-v		用将要读取的文件替换当前文件
C-x C-w		将当前缓冲写入指定的文件
C-s		向前查找
C-r		向后查找
C-M-s		规则表达式查找
C-M-r		反向规则表达式查找
M-p		选择前一个查找字符串
M-n		选择下一个查找字符串
C-d		向前删除字符
M-d		向前删除到字首
M-DEL		向后删除到字尾
M-0 C-k		向前删除到行首
C-k		向后删除到行尾
C-x DEL		向前删除到句首
M-k		向后删除到句尾
M-- C-M-k	向前删除到表达式首部
C-M-k		向后删除到表达式尾部
C-x r r		复制一个矩形到寄存器
C-x r y		插入刚刚删除的矩形
C-x r o		打开一个矩形，将文本移动至右边
C-x r c		清空矩形
C-x r t		为矩形中每一行加上一个字符串前缀
C-x r i r	从 r 缓冲区内插入一个矩形
C-x l		删除所有其他窗口
C-x 2		上下分割当前窗口
C-x 3		左右分割当前窗口
C-x 0		删除当前窗口
C-M-v		滚动其他窗口
C-x o 		切换光标到另一个窗口
C-x ^		增加窗口高度
C-x {		建校窗口宽度
C-x }		增加窗口宽度

使用 PythonWin 编写 Python 脚本
===============================
在 PythonWin 中可以使用 'Alt+/' 键来自动补全。
在 Python 交互式命令行下，可以按 Ctrl 键加向上的方向键，或者向下的方向键，可以重复键入前面所输入的命令。



































































































