# Chapter 1 -> 什么是 Linux

## 1.1 什么是 Linux 

### 1.1.1 计算机： 计算的辅助工具

* Supercomputer -> 超级计算机  [top500](http://www.top500.org/)
* Mainframe Computer -> 大型机
* Minicomputer -> 小型机
* Microcomputer -> 微机

### 1.1.2 什么是操作系统
“比较完整的操作系统”应该包含两个组件：
1. 核心与其提供的接口工具；
2. 利用核心提供的接口工具所开发的软件。

    Tips:
    从定义来看，只要能让计算机硬件正确地运行，就算是操作系统了。所以操作系统其实就是核心与其提供的接口工具。
    如上所述，因为最基本的核心缺乏与用户沟通的友好界面，所以在目前，一般提到的操作系统，都会包含核心与相关的
    用户应用软件。

#### Kernel
一般来说，核心为了实现用户所需要的正确运算结果，必须要管理的事项有以下几项：

**系统调用接口（System Call Interface）**

    通过这个接口，程序开发人员可以轻松地与核心沟通，进一步利用硬件资源。

**进程控制（Process Control）**

    在多任务环境中，一台计算机可能同时有很多的作业等待 CPU 运算处理，核心这时能够控制这些作业并有效地分配CPU
    的资源。

**内存管理（Memory Management）**

    控制整个系统的内存：如果内存不足，核心还能提供虚拟内存的功能。

**文件系统管理（File System Management）**

    文件系统的管理，例如数据的输入/输出（I/O）及不同文件格式的支持等，如果核心不能识别某个文件系统，那么将无法
    使用该文件格式的文件。例如，Windows 98 就不能识别 NTFS 文件格式的硬盘。

**设备驱动程序（Device Drivers）**

    如上所述，硬件管理是核心的主要工作之一，当然，设备驱动程序就是核心需要做的事情。“可加载模块”功能可以将驱动
    程序编辑成模块，而不需要重新编译核心。该内容会在后续的核心编译中介绍。

**Tips**

    Torvalds 先生在编写 Linux 的时候，其实该核心仅能“驱动 386 所有的硬件”，即“让 386 计算机开始运行，并且等待
    用户指令输入”。事实上，当时能够在 Linux 上运行的软件还很少。

### 1.1.3 Linux 之前 UNIX 的历史
**CTSS**

    20 世纪 60 年代初期，麻省理工学院（MIT）开发了“兼容分时系统（Compatible Time-Sharing System， CTSS）”，它可以
    让大型机通过提供数个终端（terminal）联机进入主机，利用主机资源进行计算。

**Multics** 本身有“复杂、多数的意思”。

**图形界面 XFree86 计划（1988）**

    所谓的 XFree86 其实是 X Window System + Free + x86 的整合名称。
    为什么称图形用户界面为 X 呢？因为 26 个英文子母中，Window 的 W 后面就是 X 。意指 Window 的下一班。
    需要注意的是，X Window 并不是 X Windows。

### 1.1.4 关于 GNU 计划
为了避免开发的开放源码的自由软件被用做版权软件，史托曼同时将 GNU 与 FSF 开发出来的软件都挂上 GPL 的版权声明，这个
FSF 的核心观念是 **“版权制度是促进社会进步的手段，版权本身不是自然权利”**。

对 FSF 有兴趣或者想要深入了解 GNU 的读者，请参看树德大学洪朝贵教授的网站

[洪朝贵](http://www.pws.stu.edu.tw/ckhung/a/c_83.php)

也就是说，既然 GPL 是站在互助互利的角度上去开发的，您不能将大家的成果占为己有，而取消 GPL 授权。因此，您不可以取消
GPL 软件的授权，即使已经对该软件进行了大幅度的修改。

    Tips
    很多人对于 GPL 授权一直很疑惑，对于 GPL 的商业行为更是无法接受。关于这一点，要再次申明，GPL 是可以从事商业行为的。
    很多作者也是通过这些商业行为来获取生活所需，更进一步去开发更优秀的自由软件。千万不要听到“商业”二字就排斥。这对于
    开发优秀软件的朋友来说，是不礼貌的。

## 1.2 Torvalds 的 Linux 开发

### 1.2.1 与 Minix 之间

### 1.2.2 386 硬件的多任务测试

    Tips
    为什么有时候我们同时打开两个文件（如 A 文件和 B 文件）所花的时间，要比打开 A 文件后再打开 B 文件的时间还要多？
    因为如果同时打开的话，CPU 就必须要在两个作业之间不停地切换，而且换的动作会好去一些 CPU 时间。所以，在一个 CPU 上同时
    启用两个以上的作业，要比一个一个地执行还要耗时。这也是为什么现在 CPU 开发商要在一个芯片中整合两个 CPU 的原因，也是为
    什么在运行情况比较复杂的服务器上，需要比较多的 CPU 的原因。

    Tips
	要实现多任务（multitasking）环境，除了硬件（主要是 CPU）具有多任务的特性外，操作系统也要支持这项功能。一些不具有多任务
    特性的操作系统，想要同时执行两个程序是不可能的。除非先执行的程序执行完毕，否则，后面的程序不可能主动执行。在多任务操作
	系统中，每个程序执行时，都会有一个最大 CPU 使用时间；若该作业运行的时间超过这个 CPU 使用时间，就会取消其运行，而再度进
	入核心作业的任务分配中。等待下一次的 CPU 运行。

### 1.2.3 初次发布 Linux 0.0.2
为了让 Linux 能够兼容于 UNIX 系统，托瓦兹开始将一些能够在 UNIX 上运行的软件拿来在 Linux 上运行。他发现，有很多软件
无法在 Linux 核心上运行。这是他有两种选择，

1. 修改软件，让该软件可以在 Linux 上运行；
2. 修改 Linux ，让 Linux 符合软件能够运行的规范。

托瓦兹选择了第二种，“修改 Linux”，为了让所有软件都可以在 Linux 上执行，托瓦兹开始参考标准的 POSIX 规范。

### 1.2.4 Linux 的开发： 虚拟团队的产生

    Tips
	托瓦兹小时候去动物园被企鹅咬了一口。在正式推出 2.0 版时，大家要他想一个吉祥物，他就将这个念念不忘的企鹅当成了
	Linux 的吉祥物了。

### 1.2.5 Linux 版本
`Linux distribution` === “核心 + 软件 + 工具”的可完整安装的系统。

为了让所有的 Linux 版本开发差异不会太大，采用 `Linux LSB (Linux Standard Base, Linux 标准基础)` 来规范开发人员，并
遵循目录架构的 FHS(File system Hierachy Standard， 文件系统层次标准)规范。惟一存在的差别，可能就是开发人员自己开发
出来的管理工具以及套件管理的模式。每个 Linux 版本除了架构的严谨性与选择的套件内容外，其实差异并不会太大。用户可以选
则自己喜好的发行版来安装。

[CLE](http://cle.linux.org.tw/)
[自由软件技术交流网站](http://freesf.tnc.edu.tw/index.php)
[B2D](http://b2d.tnc.edu.tw/)
[KNOPPIX](http://www.knoppix.net/)

## 1.3 Linux 的特性

	Tips
	其实，类 UNIX 可以说是目前服务器类型的操作系统的统称。因为不论是 FreeBSD、BSD、Sun UNIX、HP UNIX、Red Hat Linux、
	Mandrake Linux 等，都是由同一个祖先 Thompson 所编写的 UNIX 而来，因此，这些都统称为类 UNIX 的操作系统。

### 1.3.1 Linux 的特性

1. 自由与开放
2. 配置要求低廉
3. 功能强大而稳定
4. 独立工作

### 1.3.2 Linux 的优缺点

#### Linux 的优点
1. 稳定的系统
2. 免费或少许费用
3. 安全性、漏洞的快速修补
4. 多任务、多用户
5. 用户与组的规划
6. 相对而言资源耗费较少
7. 适合需要小核心程序的嵌入式系统

#### Linux 的缺点
1. 没有特定的支持厂商
2. 图形界面还不够友好

### 1.3.3 其他相关信息

#### 1. 遵照标准
Linux 有个优秀的传统，就是支持比较公认而正式的标准，例如开发时就是用了 POSIX 规范。

[FHS](http://www.pathname.com/fhs/)
[LSB](http://www.linuxbase.org/)

#### 2. 服务器、工作站、终端
**服务器（Server）**

	提供 Internet 一种以上网络服务的主机，例如 yahoo 提供的是 WWW 的服务，那么 yahoo 就可以称之为服务器了。

**工作站（Workstation）**

	工作站可以视为这样的机器，仅提供给一组特定人员进行数值分析、科学研究。

**终端（Terminal）**

	简单而言，就是最终用户（end-user）的那台计算机。

#### 3. 常见的授权模式与定义





## 参考资料
[网络农夫，2011，UNIX 简史](http://netlab.cse.yzu.edu.tw/~statue/freebsd/docs/csh/)
[Ken Thompson](http://plan9.bell-labs.com/cm/cs/who/ken/index.html)
[Dennis Ritchie](http://cm.bell-labs.com/cm/cs/who/dmr/)
[Richard Stallman](http://www.stallman.org/)
[洪朝贵老师的 GUN/FSF 介绍](http://saturn.stu.edu.tw/~ckhung/a/c_83.php)


