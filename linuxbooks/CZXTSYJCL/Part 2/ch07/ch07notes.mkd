# Chapter 7 - 进程控制实验

## 实验目的
1. 加深对进程概念的理解，明确进程和程序的区别；
2. 进一步理解并发的概念，明确并发与并行的区别；
3. 分析进程竞争资源现象，学习解决进程互斥的方法；
4. 了解 Linux 系统中进程通信的基本原理。

## 实验内容

###1. 进程的创建
使用系统调用 `fork()` 创建一个子进程，在此过程中，父进程与子进程同时运行，父进程显示 "I am the parent"，子进程显示 "I am the 
child."，并显示其进程 `id`。

###2. 进程的控制
创建 7 个进程，并按照指定的顺序执行。需要使用如下系统调用：
* `fork()`
* `execl()`
* `exit()`
* `wait()`
进行描述，调用 `execl()` 函数的时候，模拟调用 `/bin/echo` 下的 `echo` 命令，向控制台输出一句可鉴别是哪个进程的字符串即可。

## 准备知识
1. 阅读 Linux 的 `sched.h` 源文件，加深对进程管理概念的理解。
2. 阅读 Linux 的 `fork.c` 源文件，分析进程的创建过程。

## 实验原理
Linux 是一个多用户多任务的操作系统，即在同一个时间段内，可以有多个进程同时执行。常用的单 CPU 单核计算机在同一个时间片内
只能执行一条指令，Linux 使用了一种称为 "进程调度（process scheduling）" 的手段来实现。首先，为每个进程分配一定的运行时间
片，改时间片通常以毫秒为单位，然后依照某种调度算法，从就绪队列中选择一个进程投入运行，其他的进程暂时等待。当正在运行的进
程时间片耗尽，或执行完毕退出，或因某种原因暂时被挂起，系统就会重新调度，选择下一个进程投入运行。因为每个进程占用的时间片
都很短，对于用户而言，就好像多个进程在同时运行。

在 Linux 中，系统为每个进程创建一个 "进程控制块（process control block, PCB）"。PCB 是一个特定的数据结构，包含了很多重要
的信息，供系统调用和进程本身执行使用。其中进程 ID(process ID) 被称作进程标识符， 用来唯一标识该进程。

## 实验指导

### 1. 进程的创建
使用 `fork()` 函数创建进程。子进程调用返回 0，父进程调用返回子进程 ID，出错返回 -1.

### 2. 进程的控制
同实验内容。

## 源代码
1. 进程的创建
参看 `createprocess.c`

2. 进程的控制
参看 `controlprocess.c`
