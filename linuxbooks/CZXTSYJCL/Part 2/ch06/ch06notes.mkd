# Shell 编程实验

本节试验主要通过完成三个具体的例子来了解 Shell 程序的编写步骤。

# 实验原理
Shell 在 Linux 操作系统中担当着重要的角色，是一个交互式命令语言解释程序，是系统提供可输入指令并由操作系统执行
命令的最重要的系统程序。读取输入的指令，然后执行特定的程序，完成指定给操作系统的任务，并将输出结果返回。
不属于内核部分，而是在核心之外，工作在用户区。其基本功能是解释并执行输入的各种命令，实现用户与 Linux 核心的接口。
在多用户多进程的 Linux 操作系统中，核心为每个终端用户建立一个进程去执行 shell 解释程序。

## Shell 执行过程如下：
1. 读取输入的命令行。
2. 解析命令，按照命令名查找并调用系统文件，将其他参数封装为特定的形式传递给系统调用 **execve()**。
3. 由终端进程调用 **fork()** 函数建立一个子进程。
4. 终端进程本身调用 **wait4()** 挂起当前进程来等待子进程完成（后台命令除外）。子进程通过调用 **execv()** 运行，根据命令名到目录中查找有关文件（命令解释程序构成的文件），调入内存，执行这个程序（解释命令）。
5. 如果是后台命令（以 **&** 结尾），不用调用 **wait4()** 进行等待而是直接提示用户输入下一条命令，转到 1 ，否则调用 **wait4()** 等待子进程完成。

### 利用 Shell 编程，实现时间密码的验证

    [Source Code]
    
    #!/bin/bash
    #Program:
    #User can test the timepassword.
    #History:
    #2011/11/30 First release
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
    export PATH
    
    #Using Date Function to get current date.
    #There must be a " " space between date and "+".
    Date=`date +%Y%m%d%H%M`
    echo $Date
    #Syntax $((...)) used for integer calculation.
    #Time=$(($Date/100*100))
    #echo $Time
    #Time=$(($(($Date%100 + 15))%60))
    #echo $Time
    Time=$(($(($Date/100*100)) + $(($(($Date%100 + 15))%60))))
    echo $Time
    
    #[-p prompt] -> Display prompt on standard error, without a trailing newline, before attempting to read any input.
    #The prompt is displayed only if input is coming from a terminal.
    read -p "Please input the password: " password
    while [ "$password" != "$Time" ] && [ "$password" != "q" ]
    do
            read -p "Failed, please try again and you can input 'q' to stop this test.:" password
    done
    
    if [ "$password" == "$Time" ]; then
            echo "Success!"
            exit 0
    fi

运行结果：

    [root@sim50ptst01 src]# ./timepasword.sh 
    201111301118
    201111301133
    Please input the password: 201111301118          
    Failed, please try again and you can input 'q' to stop this test.:201111301133
    Success!

### 计算用户期望时间与系统时间的差值 countdown.sh

    [Source Code]
    #!/bin/bash
    #program
    #User can get days to his expected date
    #History:
    #2011/11/30 First Version
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
    export PATH
    
    echo "You can get the days to your expected date. The date must be later than 19710101"
    read -p "Please input the year of your expected date:" mydate
    
    #Using regex to check the string
    # 这里的写法实际上有漏洞，只要字符串中有连续的 8 个数字符合即可，下面这种写法就无法正常执行
    # ss20111129 
    # 但有趣的是 s20111129 可以正常通过。
    date_test=`echo $mydate | grep '[0-9]\{8\}'`
    if [ "$date_test" == "" ]; then
            echo "You input the wrong form of date"
            exit 1
    fi
    
    # 生成当前时间相对 19710101 的秒数。
    date_now=`date +%s`
    # 通过 date --date=STRING +%s 的方式，求出输入日期相对与 19710101 的秒数。
    date_exp=`date --date="$mydate" +%s`
    
    # 计算距离 19710101 的秒数
    date_dif_s=$((date_exp - date_now))
    # 计算距离 19710101 的天数
    date_dif=$(($date_dif_s/60/60/24))
    
    if [ "$date_dif" -gt "0" ]; then
            echo "$date_dif day(s) to your expected date."
    elif [ "$date_dif" -lt "0" ]; then
            echo "Your expected date is $(( -1 * $date_dif )) day(s) before."
    else
            echo "Your expected day is today."
    fi
    
    # echo $date_dif_s
    # echo $date_dif
    # echo $date_now
    # echo $date_exp

运行结果：

    [root@sim50ptst01 src]# ./countdown.sh 
    You can get the days to your expected date. The date must be later than 19710101
    Please input the year of your expected date:20111130
    Your expected day is today.
    [root@sim50ptst01 src]# ./countdown.sh 
    You can get the days to your expected date. The date must be later than 19710101
    Please input the year of your expected date:20111129
    Your expected date is 1 day(s) before.
    [root@sim50ptst01 src]# ./countdown.sh 
    You can get the days to your expected date. The date must be later than 19710101
    Please input the year of your expected date:20120808
    251 day(s) to your expected date.