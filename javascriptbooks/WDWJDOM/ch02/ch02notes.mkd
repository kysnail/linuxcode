# Chapter 02 JavaScipt Grammar


## 2.2 语法
英语是一种解释型的语言。在阅读和处理别人用英语写出来的文字时，阅读者本人就相当于一个英语解释器。只要作者遵守了
英语的语法规则，他想表达的意思就可以被阅读者正确地解读出来。**语法(syntax)** 的广义含义包括语句、单词、标点符号
等各个方面，它的狭义含义则特指语句结构方面的各项规则。在接下来的讨论中，我们使用的是 “语法”这个词的狭义含义。

## 2.3 语句
良好的编程习惯，每条语句单独占一行，并使用分号进行标记。

### 注释

    // single line comment

	/* multiple lines comment */

    <!-- html style comment -->

并不推荐使用 html 风格的注释，这样可以避免混淆。另外，html 风格的注释其实并不需要 `-->` 这个结尾标记，
只需要在每个注释行的开始位置放上 `<!--` 即可。

## 2.4 变量
**style 1**

    var mood;
    var age;

**style 2**

    var mood, age;

**style 3**

    var mood = "happy";
    var age = 33;

**style 4**

    var mood = "happy", age = 33;

**style 5**

    var mood, age;
    mood = "happy";
    age = 33;

**style 6**

    var my mood = "happy";	=>  wrong
    var my_mood = "happy";	=>	right

### 2.4.1 Data Type
变量 mood 的値是一个 **字符串类型的字面量**，变量 age 的值则是一个 **数值类型的字面量**。虽然它们是两种
不同的数据类型，但在 JavaScript 脚本中为它们做出声明和进行赋值的语法无任何区别。有些程序设计语言要求程序
员在声明变量的同时还必须明确地对其数据类型做出声明，这种做法称为 **类型声明(typing)**。

要求程序员必须明确地对数据类型做出声明的程序设计语言被称为 **强类型（strongly typed）** 语言。像 JavaScript
这样不要求程序员进行类型声明的语言则被称为 **弱类型（weakly typed）** 语言。所谓弱类型意味着程序员可以随意
改变某个变量的数据类型。

下面这条语句在强类型语言中是非法的，但在 JavaScript 语言里却完全没有问题：

    var age = "thirty three";
    age = 33;

JavaScript 并不关心变量 age 的值是**字符串**还是**数值**。

#### 字符串
就个人而言，笔者比较喜欢用双引号来给出字符串。作为一种良好的编程习惯，不过你们选择的是双引号还是单引号，最好
能在整个脚本中保持一致。

#### 数值

#### 布尔值

### 2.4.2 数组
字符串、数值和布尔值都属于 **离散值 (scalar)**。如果某个变量是离散的，它在任意时刻就只能有一个值。如果想用一
个变量来存储一组值，就需要使用 **数组 (array)**。

数组是由名字相同的多个值构成的一个集合，集合中的每个值都是这个数组的元素(element)。例如，我们可以用名为 
beatles 的变量来保存 Beatles 乐队全体四位成员的姓名。

在 JavaScript 脚本中，数组要用关键字 Array 来声明。在声明数组的同时，程序员还可以对这个数组的元素个数，也就是
这个数组的长度 (length) ，做出规定：

    var beatles = Array(4);

有时，我们无法提前预知某个数组最终会容纳多少个元素。这没有关系，JavaScript 并不要求声明数组时必须给出它的元素
个数，我们完全可以在声明数组时不给出明确具体的元素个数：

    var beatles = Array();

向数组中添加元素的操作称为 **填充(populating)**。在填充数组时，不仅需要给出新元素的值，还需要在数组中为新元素
指定存放位置，这个位置要通过 **下标(index)** 给出。数组里的每个元素都有一个相应的下标。在语句中，下标值必须放
在方括号内，如下所示：

    array[index] = element;

现在来填充刚才声明的 beatles 数组。我们将按照人们在提到 Beatles 乐队成员时的传统顺序（即 John、Paul、George 和
Ringo）进行。首先是第一个下标和元素：

    beatles[0] = "John";

以 0 而不是 1 作为第一个下标值多少会让人感到有些不习惯，但 JavaScript 语言就是这么规定的，所以我们这里只能这么做。
这一点很重要，但也很容易忘记，初出茅庐的程序员在刚接触 JavaScript 数组时经常在这个问题上犯错误。

下面是声明和填充 beatles 数组的全过程：

    var beatles = Array(4);
    beatles[0] = "John";
    beatles[1] = "Paul";
    beatles[2] = "Georage";
    beatles[3] = "Ringo";

有了上面这些代码，我们既可在脚本中通过下标值 "2"(beatles[2]) 来检索取值为 "George" 的元素了。请注意，beatles 数组
的长度是 4，但它最后一个元素的下标却是 3。因为数组下标是从从 0 开始计数的。

像上面这样填充数组未免有些麻烦。这里有一种相对简单的方式：在声明数组的同时对它进行填充。这么做时别忘了用逗号把各个
元素分隔开：

    var beatles = Array("John", "Paul", "George", "Ringo");

上面这条语句会为 beatles 数组中的每个元素自动分配一个下标：第一个下标是 0，第二个是 1，依此类推。因此，beatles[2] 
仍将对应于取值为 "George" 的元素。

我们甚至不用明确的表明我们是在创建数组。事实上，只需用一对方括号把各个元素的初始值括起来就足以创建出我们想要的数组
了：

    var beatles = ["John", "Paul", "George", "Ringo"];

不过，在声明或填充数组时写出 Array 关键字是一个良好的变成习惯，这可以提高 JavaScript 脚本的可读性，并让我们一眼就看
出那些变量是数组。

数组元素不必非得是字符串。可以把一些布尔值存入一个数组，还可以把一组数值存入一个数组：

    var years = Array(1940, 1941, 1942, 1943);

甚至可以把三种数据类型混在一起存入一个数组：

    var lennon = Array("John", 1940, false);

数组元素还可以是变量：
 
    var name = "John";
    beatles[0] = name;

这将把 beatles 数组的第一个元素赋值为 "John" 。

数组元素的值还可以是另一个数组的元素。下面两条语句将把 beatles 数组的第二个元素赋值为 "Paul"：

    var names = Array("Ringo", "John", "George", "Paul");
	beatles[1] = names[3];

事实上， 数组还可以包含其他的数组！数组中的任何一个元素都可以把一个数组作为它的值：

    var lennon = Array("John", 1940, false);
    var beatles = Array();
    beatles[0] = lennon;

现在，beatles 数组的第一个元素的值是另外一个数组。要想获得那个数组里的某个元素的值，我们需要使用更多的方块号。
beatles[0][0] 的值是 "John" ，beatles[0][1] 的値是 1940， beatles[0][2] 的値是 false。

这是一种功能强大的存储和获取信息的方式，但如果我们不得不记住每个下表数字的话，编程工作将是一种非常痛苦和麻烦
的体验。还好，有一种办法可以让我们以更可读的方式去填充数组。

#### 关联数组 (类似于 — 名值对、Hash 表)
beatles 数组是数值数组的一个典型例子：每个元素的下标是一个数字，每增加一个元素，这个数字就会依次增加 1。第一
个元素的下标是 0，第二个元素的下表是 1，依次类推。

如果在填充数组时只给出了元素的值，这个数组就将是一个数值数组，它的各个元素的下标将被自动创建和刷新。

我们可以通过在填充数组时为每个新元素明确地给出下标的方式来改变这种默认的行为。在为新元素给出下标时，不必局限
于整数数字。数组下标可以是字符串：

    var lennon = Array();
    lennon["name"] = "John";
    lennon["year"] = "1940";
    lennon["living"] = "false";

这称为 **关联数组 (associative array)** 。从某种意义上讲，完全可以把所有的数组都看作是关联数组**(这就是另一本
书中所说的 Everything Is a Hash)**。尽管数值数组的下标是由系统自动创建的一些数字，但每个下标仍关联着一个特定
的值。因此，数值数组完全可以被当做关联数组的一种特例来对待。

用关联数组来替代数值数组的做法意味着，我们可以通过各元素的名字而不是一个下标数字来引用它们。这可以大大提高脚本
的可读性。

下面，我们将创建一个新的 beatles 数组，并用刚才创建的 lennon 数组来填充它的第一个元素。别忘了，数组的元素可以是
另一个数组：

    var beatles = Array();
    beatles[0] = lennon;

现在，可以通过一些列有意义的名字去访问所需要的某个元素了。beatles[0]["name"] 的值是 "John"，beatles[0]["year"]
的値是 1940，beatles[0]["living"] 的値是 false。

在此基础上，还可以做进一步的改进：把 beatles 数组也填充为关联数组而不是数值数组。这样一来，我们就可以用 "drummer"
或 "bassist" 等更有意义且更容易记忆的字符串值，而不是一些枯燥乏味的整数作为下标去访问这个数组里的元素了：

    var beatles = Array();
    beatles["vocalist"] = lennon;

现在，beatles["vocalist"]["name"] 的値是 "John"，beatles["vocalist"]["year"] 的値是 1940，beatles["vocalist"]["living"]
的値是 false。


## 2.5 操作
记住，如果把字符串和数值拼接在一起，其结果将是一个更长的字符串；但如果你用同样的操作符来 "拼接" 两个数值，其结果将是
那两个数值的算术和。

## 2.6 条件语句

### 2.6.1 比较操作符
注意 `==` 表示“等于”，`=` 表示“赋值”。如果你在条件语句的某个条件里使用了单个等号，那么只要相应的
赋值操作取得成功，那个条件的求值结果就将是 `true` 。

    var my_mood = "happy";
    var your_mood = "sad";
    if (my_mood == your_mood) {
        alert("We both fell the same.");
    }

上面这条语句的错误之处在于，它是把变量 `your_mood` 赋值给变量 `my_mood` ，而不是在比较它们是否相等。
因为这种赋值操作总会成功，所以这个条件语句的结果将永远是 true。

### 2.6.2 逻辑操作符
JavaScript 允许我们把条件语句里的操作组合在一起。例如，如果想检查某个变量 — 不妨假设这个变量的名字是 num，它的
值不是在 5~10 之间，我将需要进行两次比较操作：首先，比较这两个变量是否大于或等于 5；然后，比较这两个变量是否小于
或等于 10。这两次比较操作叫做 **逻辑操作数 (operand)**。 

## 2.7 循环语句

### 2.7.1 while
while loop

    while (condition) {
        statements;
    }

这里的关键是在 while 循环的内部必须发生一些会影响循环控制条件的事情。在上例中，我们在 while 循环的内部对变量 count 
的值进行了加 1 操作，而这将导致循环控制条件在经过 10 次循环后的求值结果会变成 false。如果我们不对变量 count 的值执
行加 1 操作，这个 while 循环将永远执行下去。

### 2.7.2 do...while

### 2.7.3 for
用 for 循环来重复执行一些代码也很方便。从循环执行一些代码的意义上讲，它类似于 while 循环；从另一方面看，for 循环只
是刚才介绍的 do 循环的一种变体形式。如果仔细观察上一小节里的 do 循环的例子，我们就会发现它们都可以被改写为如下所示
的样子：

    initialize;
    while (condition) {
        statements;
        increment;
   }

而 for 循环来重复执行一些代码的好处是循环控制结构更加清晰。与循环有关的所有内容都包含在 for 语句的圆括号部分。

    for (initial condition; test condition; alter condition) {
        statements;
    }

for 循环最常见的用途之一是对某个数组里的全体元素进行遍历处理。这往往需要用到数组的 `array.length` 属性，这个属性可以
告诉我们在给定数组里的元素的个数：

    var beatles = Array("John", "Paul", "George", "Ringo");
    for (var count = 0; count < beatles.length; count++) {
        altert(beatles[count]);
    }

## 2.8 函数

