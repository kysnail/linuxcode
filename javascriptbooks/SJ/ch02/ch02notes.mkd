## Chapter 2 - Programming with JavaScript

### 2.1 Running a JavaScript Program
To include some JavaScript on an HTML page, we have to include a <script> tag inside the head of the document. A script doesn't necessarily have to be JavaScript, so we need to tell the browser what type of script we're including by adding **type attribute** with a value of **text/javascript**:

	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
	<html>
		<head>
			<title>The Running Man</title>
			<meta http-equiv="content-type" content="text/html; charset=utf-8">
		
			<script type="text/javascript" charset="utf-8">
				
			</script>
		</head>
	</html>

推荐将 JavaScript 代码放置在外部文件中，优点是：

 * It maintains the separation between content and behavior (HTML and JavaScript).
 * It makes it easier to maintain your web pages.
 * It allows you to easily reuse the same JavaScript programs on different pages of your site.

### Statements: Bite-sized Chunks for your Browser
语句 给浏览器看的最小程序块

In JavaScript each statement has to be separated by a new line or a semicolon. So two statements could be written like this:

    Statement one
    Statement 2.0

Or they could be written like this:

    Statement one; Statement 2.0;

It is generally considered best practice, however, to do both - separate statements by a semicolon and a new line:

    Statement one;
    Statement 2.0;

This way, each of your statements will be easy to read, and you'll have removed the potential for any ambiguity that might occur if two statements accidentally run together.

### Comments: Bite-sized Chunks Just for You
JavaScript supports two types of comments. The first is a single-line comment, which begins with two slashes (//) and runs to the end of thel ine:

    Statement one;	// I'm especially proud of thie one
    Statement 2.0;

If you need to write a more sizable comment, you can use a multi-line comment, starting with `/*` and ending with `*/`:

    /* This is my first JavaScript program. Please forgive any mistakes you might find here.
       If you have any suggestions, wirte to n00b@example.com. */
    Statement one;	// I'm especially proud of thie one
    Statement 2.0;

### Variables: Sorting Data for you Program
The approach you use to name variables really comes down to personal preference, and which name style you find more readable. I use camel casing because some long-forgotten lecturer beat it into me with a big plank.

#### Variable Types: Different Types for Different Data
A lot of programming languages feature **strictly typed** variables. With these, you have to tell the program what type of data the variable is goint to hold when it's declared, and you can't change a variable's type once it has been created.

JavaScript, however, is **loosely typed** - the language doesn't care _what_ your variables hold. A variable could start off holding a number, then change to holding a character, a word, or anything else you want it to hold.

Even thought you don't have to declare the data type up front, it's still vital to know what type of data a variable can store, so that you can use and manipulate them properly inside your own programs. In JavaScript, you can work with numbers, strings, Booleans, arrays and objects. We'll take a look at the first four of these types now, but you'll have to wait till the end of the chapter to read about objects, because  they're a bit trickier.

#### Numbers

#### Strings

#### Booleans

#### Arrays

#### Associative Arrays

### Objects
可以说这是本章最重要的知识点了。对象创建方式有两种，分别为:

 * Standard Assignment Syntax
 * Object Literal Syntax

#### Standard Assignment Syntax

    var Robot = new Object();
    
    Robot.metal = "Titanium";
    Robot.killAllHumans = function()
    {
        alert("Exterminate!");
    };
    
    Robotl.killAllHumans();

#### Object Literal Syntax

    var Robot = 
    {
        metal: "Titanium",
        killAllHumans: function()
        {
            alert("Exterminate!");
        }
    };
    
Rather than first creating an empty object and then populating it with properties and methods using a series of assignment statements, **object literal syntax** lets you create the object and its conents with a single statement.

In object literal syntax, we represent a new object with curly braces; inside those braces, we list the properties and methods of the object, separated by commas. For each property and method, we assign a value using a colon (:) instead of the assignment operator.

Object literal syntax can be a little difficult to read once you've been using the standard assignment syntax for a while, but it is slightly more succinct.

We're going to use this object literal syntax throught this book to create neatly self-contained packages of functionality that you can easily transport from page to page.















