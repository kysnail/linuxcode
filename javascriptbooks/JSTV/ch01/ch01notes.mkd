**JavaScript 专题一 —— 构建自己的 JS 库**
ITCAST 签约讲师

**姜昊**

# 通过本讲的学习你将学到：
* 什么是 JavaScript 库
* 编写自己的 JavaScript 库时需要注意什么
* 编写自己的 JavaScript 库
* 完善自己的 JavaScript 库

# JavaScript 库
大家可能都用过网上那些卓越的 JavaScript 库，比如 Prototype、JQuery 等。你会发现这些库中包含许多方便的小函数。尽管
不是官方 JavaScript 语言的一部分，但是使用这些经过验证的可靠的函数会使你的代码更清晰、更易读，而且当别人需要调试
或搞懂你的开发成果时也将更加容易被人理解。

库也是一个饱受争议的热门话题。一种观点认为他们是非常棒的工具，是任何开发者都不可获缺的；另一种观点则认为在不理解
库的内部工作原理的情况下对库形成依赖，会助长懒惰的风气从而导致开发者素质下降。但是不管怎样，好像每个人都赞同编写
自己的库，况且把自己日常要用到的东西合并到一起本身就是一件有意义的事。

# 开始之前
在开始构建自己的 JS 库之前，首先应该注意两件事，这将帮助你将自己的库构建的更加优雅、合理。

1. 不要用版本检测
2. 使用命名空间

## 不要用版本检测
当谈到最佳实践时，"版本检测" 或者 "浏览器嗅探" 通常被认为是错误的做法。对于我们大多数人而言，通过检测所希望得到的
结果无非是下列浏览器中的一种：

* Microsoft IE6/IE7/..
* Firefox
* Safari
* Opera

我们应该知道能够浏览网页的并不只有这些浏览器（还可能是手持设备之类的东东）并且这些版本很容易就会被淘汰你不能为了市
面上每一款前途未卜的浏览器都花费实践进行检测。

## 推荐使用 "能力检测"
作为浏览器检测方法的最佳实践是**能力检测**，通常也被称为**对象检测**，指的是在代码执行之前检测某个脚本对象或方法是
否存在，而不是依赖于你对那个浏览器具有哪些特定的了解。如果必须的对象或方法存在，那么说明浏览器能够使用它，而且代码
也可以按照预期执行。

    if (document.body && document.body.getElementByTagName) {
    	// 使用 document.body.getElementByTagName 的代码
    }

## 使用命名空间
首先需要说明的是：在 JavaScript 2.0 被广泛应用之前，我们所说的命名空间并不是真正的命名空间，只是能在脚本内部营造的
一个属于自己的小空间的技巧而已。

JavaScript 支持多次声明的同名函数，但只使用最后声明的版本。当你要使用几个自行其是的库时，必须确保他们不会与你自己
编写的代码发生冲突。而要避免这些问题的困扰，只需要记住两点：**唯一性**、**不共享**。

### 唯一性
要确保唯一性，首先要为自己的命名空间挑选一个不会在别出被使用的名字。例如 Google Maps 在所有的标识符中都添加了 G 前缀。

我们将把我们自己的命名空间命名为 IC(Itcast 的简写)。当然大家可以使用自己的名字，这样即使一起使用其他人编写的库时也不会
发生互相干扰的情况。

### 不共享
不共享意味着什么都不共享

当你创建自己的 **$** 函数时你可能会与著名的 Prototype 中的 $ 函数发生冲突而导致 Prototype 中的 $ 无法使用。我们不希望
其他一些具有不同功能的公共库或脚本停止运行。要保证只有你自己使用 **$()** 函数，你可以使用一个 JS 的小技巧。

    (function() {
    	// 运行的代码
    })();

**(function(){})();** - 这段代码中存在三个括号，展示了括号的两种作用。
1. 类似于其他语言中的符号，起到分隔作用；
2. 运算符，表示它要运行。


还有一些其他的方法来达到相同的目的 - 保证你的代码被包含在它自己的小空间中。

## 开始编写自己的 JS 库
如何创建自己的库呢？我们按下面的模板来编写代码：

    (function() {
    	function $() {
	    // code
	}
    
    	window['myNameSpace']={}

    	window['myNameSpace']['$']=$;
    })();

这里我们可以写自己的 **$()** 方法，并将这个方法注册到 window 对象上。

    Prototype 中的 $(); 方法类似于 getElementById() 。


