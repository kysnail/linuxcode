# JavaScript 面向对象 —— 上

JavaScript 是一种基于原型（prototype）的面向对象的语言，没有类的概念，所有的一切都派生自现有对象的一个副本。

`Function` 和 `Object` 等都是 JavaScript 的原型类型，一共有六种。

`Object` 对象不能当做构造函数来使用，只有 `Function` 类型的对象才行。Object 类定义出来的对象不能当做构造函数使用，
只有 Function 类定义的对象才可以当做构造函数来使用。

对比下面两种创建方式

    var myFunction = new Function('', '');

    vs

    function myFunction() {
    }

上面的哪种方法有严重的性能问题，所以并不推荐，并且对应上面写法创建的对象，不需放在使用之前的位置。

## 创建对象的两种方式

    var obj = new Object();
    var obj = {}

## 创建数组的两种方式

    var array = new Array();
    var array = [];

## 访问操作
在 JavaScript 中对象只有一个操作，即访问操作。`对象只有成员访问操作`。

    function Object2() {
    }

    function Object3() {
    }

    // 类抄写
    Object3.prototype = new Object2();
    Object.prototype.foo = ...
    aObj = new Object3();
    aObj.foo();
    Object2.prototype.foo = ...
    aObj.foo();

`★ JavaScript  中实际上只有属性，没有方法，所有的一切都以类似于名值对的方式进行存储★ `

所谓的属性实际上就是一个 hash 值，也即 `key-value` 的集合。方法实际上也是属性，特殊的地方在于它可以执行。对应的
也只有一个操作，获取对象属性。
