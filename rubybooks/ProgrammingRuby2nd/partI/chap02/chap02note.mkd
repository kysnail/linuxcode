#Chapter 2 - Ruby.new

## Ruby Is an Object-Oriented Language

	点唱机 - jukebox

重新说一遍， Ruby 是真正的面向对象语言。在 Ruby 里，需要定义类（class）来表示尸体。类是状态（state，比如歌曲名称）和使用这些状态的方法（method，可能是一个播放歌曲的方法）的组合。

对象（object）和类的实体（class instance）等同互用。

有一点比较特殊：

	方法是通过对象发送消息（message）来唤起调用的。消息包含方法名称以及方法可能需要的参数。当对象接收到一条消息时，它在
	自己的类中查找相应的方法。如果找到了，该方法会被执行。

	而将方法调用表述为消息形式的想法来自于 Smalltalk 。

比如下面的一些方法调用

	"gin joint".length		->	9
	"Rick".index("c")		->	2
	-1942.abs				-> 	1942
	sam.play(song)			->	"duh dum, da dum de dum ..."

点号（“.”）之前的东西被称为 **接收者（receiver）**，点号后面的名字是被调用的方法。

值得注意到是：

	Ruby 和大多数别的语言之间有一个很大的区别。
	例如在 Java 中，是通过调用另外一个函数来得到某些成员数据的绝对值，并把结果传回数据本身。你可以写成：
		number = Math.abs(number);		// Java Code

	而在 Ruby 里，确定绝对值的能力内建在数字中——处理细节在内部实现。只要发送 abs 消息到一个数字对象，让它
	去得到绝对值即可。
		number = number.abs

## Some Basic Ruby

	Ruby 中的注释以 # 字符开始，行尾结束。
	代码布局由你决定，缩进编排并不重要（但是如果打算要发布你的代码的话，使用两个字符的缩进编排会让你在社区内交很多朋友）。

下面两者是等价的

	def say_goodnight(name)
		...
	end
	等价于
	def say_goodnight name
		...
	end

对于参数是否放在括号里，Ruby 并没有规定，比如下面的两行是等同的。

	puts say_goodnight("John-Boy")
	puts (say_goodnight("John-Boy"))

建议除了最简单的情况以外，都请使用括号。

### Ruby 字符串对象 - 字面量（literals）
所谓的 **字面量** 是有一组单引号或双引号之间的字符序列。这两者的区别在于

	当构造字面量时，Ruby 对字符串所做处理的多寡有所不同。

Ruby 对单引号串处理得很少。除了极少的一些例外，键入到字符串字面量的内容就构成了这个字符串的值。

Ruby 对双引号字符串有更多的处理。比如可以解析字符串中的转移字符，可以向字符串内地表达式 **内插（expression interpolation）**， `#{表达式}`序列会被“表达式”的值替换。可以用这种方式重写前面的方法。

Ruby 使用一种命名惯例来区分名称的用途：

	名称的第一个字符显示这个名称如何被使用。
	局部变量、方法参数和方法名称都必须以小写字母或下划线开始。
	全局变量都有美元符号（$）为前缀，而实例变量以“at”（@）符号开始。
	类变量以两个“at”（@@）符号开始。
	最后，类名称、模块名称和常量都必须以一个大写字母开始。

	方法名称可以 ? ! = 字符结束。
