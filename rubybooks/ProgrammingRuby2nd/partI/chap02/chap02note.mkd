#Chapter 2 - Ruby.new

## 2.1 Ruby Is an Object-Oriented Language

	点唱机 - jukebox

重新说一遍， Ruby 是真正的面向对象语言。在 Ruby 里，需要定义类（class）来表示尸体。类是状态（state，比如歌曲名称）和使用这些状态的方法（method，可能是一个播放歌曲的方法）的组合。

对象（object）和类的实体（class instance）等同互用。

有一点比较特殊：

	方法是通过对象发送消息（message）来唤起调用的。消息包含方法名称以及方法可能需要的参数。当对象接收到一条消息时，它在
	自己的类中查找相应的方法。如果找到了，该方法会被执行。

	而将方法调用表述为消息形式的想法来自于 Smalltalk 。

比如下面的一些方法调用

	"gin joint".length		->	9
	"Rick".index("c")		->	2
	-1942.abs				-> 	1942
	sam.play(song)			->	"duh dum, da dum de dum ..."

点号（“.”）之前的东西被称为 **接收者（receiver）**，点号后面的名字是被调用的方法。

值得注意到是：

	Ruby 和大多数别的语言之间有一个很大的区别。
	例如在 Java 中，是通过调用另外一个函数来得到某些成员数据的绝对值，并把结果传回数据本身。你可以写成：
		number = Math.abs(number);		// Java Code

	而在 Ruby 里，确定绝对值的能力内建在数字中——处理细节在内部实现。只要发送 abs 消息到一个数字对象，让它
	去得到绝对值即可。
		number = number.abs

## 2.2 Some Basic Ruby

	Ruby 中的注释以 # 字符开始，行尾结束。
	代码布局由你决定，缩进编排并不重要（但是如果打算要发布你的代码的话，使用两个字符的缩进编排会让你在社区内交很多朋友）。

下面两者是等价的

	def say_goodnight(name)
		...
	end
	等价于
	def say_goodnight name
		...
	end

对于参数是否放在括号里，Ruby 并没有规定，比如下面的两行是等同的。

	puts say_goodnight("John-Boy")
	puts (say_goodnight("John-Boy"))

建议除了最简单的情况以外，都请使用括号。

### Ruby 字符串对象 - 字面量（literals）
所谓的 **字面量** 是有一组单引号或双引号之间的字符序列。这两者的区别在于

	当构造字面量时，Ruby 对字符串所做处理的多寡有所不同。

Ruby 对单引号串处理得很少。除了极少的一些例外，键入到字符串字面量的内容就构成了这个字符串的值。

Ruby 对双引号字符串有更多的处理。比如可以解析字符串中的转移字符，可以向字符串内地表达式 **内插（expression interpolation）**， `#{表达式}`序列会被“表达式”的值替换。可以用这种方式重写前面的方法。

Ruby 使用一种命名惯例来区分名称的用途：

	名称的第一个字符显示这个名称如何被使用。
	局部变量、方法参数和方法名称都必须以小写字母或下划线开始。
	全局变量都有美元符号（$）为前缀，而实例变量以“at”（@）符号开始。
	类变量以两个“at”（@@）符号开始。
	最后，类名称、模块名称和常量都必须以一个大写字母开始。

	方法名称可以 ? ! = 字符结束。

## 2.3 Arrays and Hashes
Ruby 的数组（arrays）和散列表（hashes）是被索引的收集（indexed collections）。两者都存储对象的集合，通过键（key）来访问。数组的键是整数，而散列表支持以任何对象为它的键。

    数组和散列表会按需调整大小来保存新的元素。
    访问数组元素是高效的，但是散列表提供了灵活性。

### array literal - 数组字面量
同 JavaScript 一样，可以直接通过定义 array literal 创建并初始化数组。

    数组字面量（array literal）
    方括号之间放一组元素——可以创建和初始化新的数组对象。有了数组对象，在方括号之间提供索引便可以
    访问单个元素。

**RefCode `0206.rb`**

Ruby 提供了一种快捷的方式用来创建一个单词数组：

    a = %w{ant bee cat dog elk}

**RefCode `0207.rb`**

### hash literal - 散列表字面量
Ruby 的散列表与数组相似。散列表字面量使用花括号而不是方括号。这个字面量必须为每一项提供两个对象：一个键（key）和一个值（value）。

    inst_section = {
        'cello'     =>  'string',
        'clarinet'  =>  'woodwind',
        'drum'      =>  'percussion',
        'oboe'      =>  'woodwind',
        'trumpet'   =>  'brass',
        'violin'    =>  'string'
    }

输出结果：

    inst_section['oboe']        ->  "woodwind"
    inst_section['cello']       ->  "string"
    inst_section['bassoon']     ->  nil

**RefCode `0208.rb`**

默认情况下，如果用一个散列表没有包含的键进行索引，散列表就返回 nil。通常这样是很方便的，比如在条件表达式中 nil 就意味着 false 。而有时候你可能想改变这个默认动作。比如使用散列表来计算每个键出现的次数时，如果这个默认值是 0 的话就会很方便。这很容易做到：当创建一个新的空散列表时，可以指定一个默认值。

**RefCode `0209.rb`**

## 2.4 Control Structures
Ruby 具有所有常见的控制结构，但与 Java、C、Perl 这种使用花括号表示语句体的语言不同。Ruby 使用 `end` 关键字表明程序体的结束为止。这与 Python 依靠缩进的做法不同，也与 Pascal 使用 `begin ... end` 的做法不同。

**RefCode `0210.rb`**

同样 while 语句以 end 结束。

    while weight < 100 and num_pallets <=30
        pallet = next_pallet()
        weight += pallet.weight
        num_pallet += 1
    end

大多数 Ruby 语句会返回值，这意味着可以把它们当条件使用。例如，gets 方法从标准输入流返回下一行，或者当达到文件结束时返回 nil。因为 Ruby 在条件中把 nil 当做一个假值（false）对待，可以像下面这样来处理文件中的行。

    while line = gets
        puts line.downcase
    end

在这里赋值语句要么把变量 line 设置为下一行，要么是 nil，然后 while 语句测试这个赋值的结果，如果它是 nil ，则终止这个循环。

如果 if 或 while 语句的程序体只是一个表达式， Ruby 的 **语句修饰符（statement modifiers）** 是一种有用的快捷方式。只要写出表达式，后面跟着 if 或 while 和条件。比如，这是 if 语句的例子。

    if radiation > 3000
        puts "Danger, Will Robinson"
    end

用语句修饰符重新编写了同样这个例子。

    puts "Danger, Will Robinson" if radiation > 3000

同样地，下面是 while 循环语句

    square = 2
    while square < 1000
        square = square * square
    end

用语句修饰符，这个语句变得更简洁了。

    square = 2
    square = square * square while square < 1000

**Perl 程序员应该对这些语句修饰符很熟悉**。


